package mypck;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Quiz extends JFrame implements ActionListener {

    String[][] questions = new String[10][5];
    String[][] answers = new String[10][2];
    String[][] useranswers = new String[10][1];
    JLabel qno, question;
    JRadioButton op, op2, op3, op4;
    ButtonGroup groupOption;
    JButton next, lifeline, submit;
    public static int timer = 15;
    public static int ans_given = 0;
    public static int count = 0;
    public static int score = 0;
    String name;

    final int TOTAL_QUESTIONS = 10;

    Quiz(String name) {
        this.name = name;
        count = 0;
        score = 0;
        timer = 15;
        ans_given = 0;
        useranswers = new String[10][1]; // Reset on restart

        setBounds(50, 0, 1440, 850);
        getContentPane().setBackground(Color.WHITE);
        setLayout(null);

        ImageIcon il = new ImageIcon(ClassLoader.getSystemResource("icons/user1.jpg"));
        JLabel image = new JLabel(il);
        image.setBounds(0, 0, 1440, 392);
        add(image);

        qno = new JLabel();
        qno.setBounds(100, 450, 50, 30);
        qno.setFont(new Font("Verdana", Font.BOLD, 26));
        add(qno);

        question = new JLabel();
        question.setBounds(150, 450, 900, 30);
        question.setFont(new Font("Verdana", Font.BOLD, 26));
        add(question);

        questions[0][0] = "Which of the following is not a Java feature?";
        questions[0][1] = "Object-oriented";
        questions[0][2] = "Use of pointers";
        questions[0][3] = "Portable";
        questions[0][4] = "Dynamic";
        answers[0][1] = "Use of pointers";

        questions[1][0] = "Which component is used to compile, debug and execute Java programs?";
        questions[1][1] = "JRE";
        questions[1][2] = "JIT";
        questions[1][3] = "JDK";
        questions[1][4] = "JVM";
        answers[1][1] = "JDK";

        questions[2][0] = "What is the extension of compiled Java classes?";
        questions[2][1] = ".java";
        questions[2][2] = ".txt";
        questions[2][3] = ".class";
        questions[2][4] = ".exe";
        answers[2][1] = ".class";

        questions[3][0] = "Which keyword is used for inheritance in Java?";
        questions[3][1] = "inherits";
        questions[3][2] = "this";
        questions[3][3] = "super";
        questions[3][4] = "extends";
        answers[3][1] = "extends";

        questions[4][0] = "Which method is the entry point of any Java program?";
        questions[4][1] = "start()";
        questions[4][2] = "main()";
        questions[4][3] = "run()";
        questions[4][4] = "init()";
        answers[4][1] = "main()";

        questions[5][0] = "What is the size of int in Java?";
        questions[5][1] = "4 bytes";
        questions[5][2] = "2 bytes";
        questions[5][3] = "8 bytes";
        questions[5][4] = "Depends on the system";
        answers[5][1] = "4 bytes";

        questions[6][0] = "Which of these is not a primitive data type?";
        questions[6][1] = "int";
        questions[6][2] = "Float";
        questions[6][3] = "boolean";
        questions[6][4] = "char";
        answers[6][1] = "Float";

        questions[7][0] = "What is bytecode in Java?";
        questions[7][1] = "Code generated by a Java compiler";
        questions[7][2] = "Code executed by a Java compiler";
        questions[7][3] = "Code generated by a JVM";
        questions[7][4] = "Code written in .java file";
        answers[7][1] = "Code generated by a Java compiler";

        questions[8][0] = "Which of the following is not an OOP concept in Java?";
        questions[8][1] = "Inheritance";
        questions[8][2] = "Encapsulation";
        questions[8][3] = "Polymorphism";
        questions[8][4] = "Compilation";
        answers[8][1] = "Compilation";

        questions[9][0] = "Which exception is thrown when a divided by zero occurs?";
        questions[9][1] = "NullPointerException";
        questions[9][2] = "ArithmeticException";
        questions[9][3] = "ClassNotFoundException";
        questions[9][4] = "IOException";
        answers[9][1] = "ArithmeticException";

        op = new JRadioButton();
        op.setBounds(170, 520, 700, 30);
        op.setBackground(Color.WHITE);
        op.setFont(new Font("Dialog", Font.PLAIN, 20));
        add(op);

        op2 = new JRadioButton();
        op2.setBounds(170, 560, 700, 30);
        op2.setBackground(Color.WHITE);
        op2.setFont(new Font("Dialog", Font.PLAIN, 20));
        add(op2);

        op3 = new JRadioButton();
        op3.setBounds(170, 600, 700, 30);
        op3.setBackground(Color.WHITE);
        op3.setFont(new Font("Dialog", Font.PLAIN, 20));
        add(op3);

        op4 = new JRadioButton();
        op4.setBounds(170, 640, 700, 30);
        op4.setBackground(Color.WHITE);
        op4.setFont(new Font("Dialog", Font.PLAIN, 20));
        add(op4);

        groupOption = new ButtonGroup();
        groupOption.add(op);
        groupOption.add(op2);
        groupOption.add(op3);
        groupOption.add(op4);

        next = new JButton("Next");
        next.setBounds(1100, 560, 200, 40);
        next.setFont(new Font("Tahoma", Font.PLAIN, 22));
        next.setBackground(new Color(30, 144, 255));
        next.setForeground(Color.WHITE);
        next.addActionListener(this);
        add(next);

        lifeline = new JButton("50-50 Lifeline");
        lifeline.setBounds(1100, 630, 200, 40);
        lifeline.setFont(new Font("Tahoma", Font.PLAIN, 22));
        lifeline.setBackground(new Color(30, 144, 255));
        lifeline.setForeground(Color.WHITE);
        lifeline.addActionListener(this);
        add(lifeline);

        submit = new JButton("Submit");
        submit.setBounds(1100, 700, 200, 40);
        submit.setFont(new Font("Tahoma", Font.PLAIN, 22));
        submit.setBackground(new Color(30, 144, 255));
        submit.setForeground(Color.WHITE);
        submit.addActionListener(this);
        submit.setEnabled(false);
        add(submit);

        start(count);
        setVisible(true);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == next) {
            repaint();
            ans_given = 1;

            if (groupOption.getSelection() == null) {
                useranswers[count][0] = "";
            } else {
                useranswers[count][0] = groupOption.getSelection().getActionCommand();
            }

            if (count == TOTAL_QUESTIONS - 2) {
                next.setEnabled(false);
                submit.setEnabled(true);
            }

            count++;
            if (count < TOTAL_QUESTIONS) {
                start(count);
            }
        } else if (e.getSource() == lifeline) {
            if (count == 2 || count == 4 || count == 6 || count == 8 || count == 9) {
                op2.setEnabled(false);
                op3.setEnabled(false);
            } else {
                op.setEnabled(false);
                op4.setEnabled(false);
            }
            lifeline.setEnabled(false);
        } else if (e.getSource() == submit) {
            ans_given = 1;
            if (groupOption.getSelection() == null) {
                useranswers[count][0] = "";
            } else {
                useranswers[count][0] = groupOption.getSelection().getActionCommand();
            }

            score = 0; // FIX: Reset before calculation
            for (int i = 0; i < useranswers.length; i++) {
                if (useranswers[i][0] != null && useranswers[i][0].equals(answers[i][1])) {
                    score += 10;
                }
            }

            setVisible(false);
            new Score(name, score);
        }
    }

    public void paint(Graphics g) {
        super.paint(g);
        String time = "Time left - " + timer + " seconds";
        g.setFont(new Font("Tahoma", Font.BOLD, 22));
        g.setColor(Color.RED);
        g.drawString(time, 1100, 500);

        timer--;
        try {
            Thread.sleep(1000);
            repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (ans_given == 1) {
            ans_given = 0;
            timer = 15;
        } else if (timer < 0) {
            timer = 15;
            if (groupOption.getSelection() == null) {
                useranswers[count][0] = "";
            } else {
                useranswers[count][0] = groupOption.getSelection().getActionCommand();
            }

            if (count == TOTAL_QUESTIONS - 2) {
                next.setEnabled(false);
                submit.setEnabled(true);
            }

            if (count == TOTAL_QUESTIONS - 1) {
                score = 0; // FIX: Reset score here too
                for (int i = 0; i < useranswers.length; i++) {
                    if (useranswers[i][0] != null && useranswers[i][0].equals(answers[i][1])) {
                        score += 10;
                    }
                }
                setVisible(false);
                new Score(name, score);
            } else {
                count++;
                if (count < TOTAL_QUESTIONS) {
                    start(count);
                }
            }
        }
    }

    public void start(int count) {
        qno.setText((count + 1) + ". ");
        question.setText(questions[count][0]);
        op.setText(questions[count][1]);
        op.setActionCommand(questions[count][1]);

        op2.setText(questions[count][2]);
        op2.setActionCommand(questions[count][2]);

        op3.setText(questions[count][3]);
        op3.setActionCommand(questions[count][3]);

        op4.setText(questions[count][4]);
        op4.setActionCommand(questions[count][4]);

        groupOption.clearSelection();

        op.setEnabled(true);
        op2.setEnabled(true);
        op3.setEnabled(true);
        op4.setEnabled(true);
    }

    public static void main(String[] args) {
        new Quiz("User");
    }
}
